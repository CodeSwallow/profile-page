import Head from 'next/head';
import Image from "next/image";
import { useRouter } from 'next/router';
import { useEffect, useRef, useState } from 'react';
import { useInView } from 'react-intersection-observer';
import Layout from "@/components/layout";
import {getProjectById} from "@/pages/api/projects";

export default function Project({projectData}) {
    const [isTechnologiesInView, setIsTechnologiesInView] = useState(false);
    const [isFeaturesInView, setIsFeaturesInView] = useState(false);
    const router = useRouter();
    const { ref: technologiesRef, inView: technologiesInView } = useInView({
        triggerOnce: true,
    });
    const { ref: featuresRef, inView: featuresInView } = useInView({
        triggerOnce: true,
    });

    const animationClassDelay = {
        0: 'animate-[right-to-left_0.5s_ease]',
        1: 'animate-[right-to-left_0.7s_ease]',
        2: 'animate-[right-to-left_0.9s_ease]',
        3: 'animate-[right-to-left_1.1s_ease]',
        4: 'animate-[right-to-left_1.3s_ease]',
        5: 'animate-[right-to-left_1.5s_ease]',
    }

    useEffect(() => {
        if (featuresInView) {
            setIsFeaturesInView(true);
        }
    }, [featuresInView]);

    useEffect(() => {
        if (technologiesInView) {
            setIsTechnologiesInView(true);
        }
    }, [technologiesInView]);

    return (
        <Layout>
            <Head>
                <title>Project</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <section>
                <div className="px-8 mx-auto text-start">
                    <button
                        type="button"
                        onClick={() => router.back()}
                        className="mt-2 md:mt-0 text-gray-500 text-sm dark:text-gray-300 hover:font-semibold"
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                            <path strokeLinecap="round" strokeLinejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
                        </svg>
                    </button>
                    <h1 className="border-t-2 border-black dark:border-white pt-12 mb-8 mt-4 sm:mt-8 text-4xl font-bold tracking-tight leading-none text-gray-900 dark:text-white">
                        {projectData.name}
                    </h1>
                    <div className="text-justify">
                        <p className="mb-4 font-normal text-gray-500 text-lg dark:text-gray-300">
                            {projectData.description}
                        </p>
                        <div className="flex justify-center md:justify-evenly text-center mt-8">
                            <div className="mr-1 transition ease-in-out hover:-translate-y-1 hover:scale-110 rounded shadow-lg p-2 w-32 bg-purple-100 dark:bg-gray-700">
                                <a href={projectData.url} target="_blank">
                                    <p className="font-normal text-gray-500 text-lg dark:text-gray-300">
                                        Website
                                    </p>
                                </a>
                            </div>
                            <div className="ml-1 transition ease-in-out hover:-translate-y-1 hover:scale-110 rounded shadow-lg p-2 w-32 bg-purple-100 dark:bg-gray-700">
                                <a href={projectData.github[0]} target="_blank">
                                    <p className="font-normal text-gray-500 text-lg dark:text-gray-300">
                                        GitHub
                                    </p>
                                </a>
                            </div>
                        </div>
                        <div className="animate-clear-up-slow flex justify-center mt-8 transition ease-in-out hover:scale-110">
                            <Image
                                src={projectData.imageUrl}
                                alt={`Project Image`}
                                width={600}
                                height={600}
                            />
                        </div>
                        <div className="my-8">
                            <h2 className="text-2xl text-gray-900 dark:text-white mb-1">
                                Features:
                            </h2>
                            <ul className="list-disc ml-8" ref={featuresRef}>
                                {projectData.features.map((feature, index) => (
                                    <li key={index}
                                        className={`${isFeaturesInView ? animationClassDelay[index] : 'opacity-0'} text-lg dark:text-gray-300 transition ease-in-out hover:translate-x-8 hover:scale-110`}>
                                        {feature.name}
                                    </li>
                                ))}
                            </ul>
                        </div>
                        <div className="my-8">
                            <h2 className="text-2xl text-gray-900 dark:text-white mb-1">
                                Technologies Used:
                            </h2>
                            <ul className="list-disc ml-8" ref={technologiesRef}>
                                {projectData.technologies.map((technology, index) => (
                                    <li key={index}
                                        className={`${isTechnologiesInView ? animationClassDelay[index] : 'opacity-0'} text-lg dark:text-gray-300 transition ease-in-out hover:translate-x-8 hover:scale-110`}>
                                        {technology}
                                    </li>
                                ))}
                            </ul>
                        </div>
                        <p className="mb-12 text-lg font-normal text-gray-500 dark:text-gray-300">
                            {projectData.extraDescription}
                        </p>
                    </div>
                </div>
            </section>
        </Layout>
    )
}

export async function getServerSideProps(context) {
    const {id} = context.query;

    try {
        // const response = await fetch(`${process.env.BASE_URL}/projects/${id}`);
        // const projectData = await response.json();

        const projectData = await getProjectById(id);

        return {
            props: {
                projectData
            }
        };
    } catch (error) {
        console.error('Error:', error);
        return {
            props: {
                projectData: null
            }
        };
    }
}

